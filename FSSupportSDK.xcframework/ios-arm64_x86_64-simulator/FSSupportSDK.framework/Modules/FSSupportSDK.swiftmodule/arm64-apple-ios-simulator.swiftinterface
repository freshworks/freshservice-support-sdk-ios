// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FSSupportSDK
import CommonCrypto
import CoreGraphics
@_exported import FSSupportSDK
import Foundation
import QuickLook
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
public enum FWProduct : Swift.String, Swift.Codable {
  case freshdesk
  case freshchat
  case freshcaller
  case freshteam
  case freshmarketer
  case freshsales
  case freshservice
  case freshsuccess
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension FSSupportSDK.KeychainWrapper {
  public func remove(forKey key: FSSupportSDK.KeychainWrapper.Key)
}
extension FSSupportSDK.KeychainWrapper {
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> Swift.String? {
    get
    set
  }
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Bool? {
    get
    set
  }
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Int? {
    get
    set
  }
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Double? {
    get
    set
  }
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Float? {
    get
    set
  }
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> CoreFoundation.CGFloat? {
    get
    set
  }
  public subscript(key: FSSupportSDK.KeychainWrapper.Key) -> Foundation.Data? {
    get
    set
  }
}
extension FSSupportSDK.KeychainWrapper {
  public func data(forKey key: FSSupportSDK.KeychainWrapper.Key) -> Foundation.Data?
  public func bool(forKey key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Bool?
  public func integer(forKey key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Int?
  public func float(forKey key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Float?
  public func cgFloat(forKey key: FSSupportSDK.KeychainWrapper.Key) -> CoreFoundation.CGFloat?
  public func double(forKey key: FSSupportSDK.KeychainWrapper.Key) -> Swift.Double?
  public func string(forKey key: FSSupportSDK.KeychainWrapper.Key) -> Swift.String?
}
extension FSSupportSDK.KeychainWrapper {
  public struct Key : Swift.Hashable, Swift.RawRepresentable, Swift.ExpressibleByStringLiteral {
    public var rawValue: Swift.String
    public init(rawValue: Swift.String)
    public init(stringLiteral value: Swift.String)
    public typealias ExtendedGraphemeClusterLiteralType = Swift.String
    public typealias RawValue = Swift.String
    public typealias StringLiteralType = Swift.String
    public typealias UnicodeScalarLiteralType = Swift.String
  }
}
@_hasMissingDesignatedInitializers public class FSSupport {
  public struct Config {
    public var themeColor: UIKit.UIColor?
    public var enbleDarkMode: Swift.Bool?
    public init(themeColor: UIKit.UIColor? = UIColor.systemBackground, enbleDarkMode: Swift.Bool? = nil)
  }
  public enum Modules {
    case tickets
    case reportIssue
    case requestService
    case approveRequests
    public func getModuleName() -> Swift.String
    public static func == (a: FSSupportSDK.FSSupport.Modules, b: FSSupportSDK.FSSupport.Modules) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func initialize(domain: Swift.String, slug: Swift.String, userToken: Swift.String, config: FSSupportSDK.FSSupport.Config?)
  public static func deinitialize()
  public static func buildDashboard(modules: [FSSupportSDK.FSSupport.Modules]?) -> FSSupportSDK.SupportSDKView
  public static func buildTicketList() -> FSSupportSDK.SupportSDKView
  public static func buildRequestService() -> FSSupportSDK.SupportSDKView
  public static func buildReportIssue() -> FSSupportSDK.SupportSDKView
  public static func buildApprovalRequests() -> FSSupportSDK.SupportSDKView
  public static func showDashboard(parentController: UIKit.UIViewController, modules: [FSSupportSDK.FSSupport.Modules]?)
  public static func showTicketList(parentController: UIKit.UIViewController)
  public static func requestService(parentController: UIKit.UIViewController)
  public static func reportIssue(parentController: UIKit.UIViewController)
  public static func showApprovalRequests(parentController: UIKit.UIViewController)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FSDebugger {
  public static func enableDebugger()
  @objc deinit
}
public enum KeychainItemAccessibility {
  @available(iOS 4, *)
  case afterFirstUnlock
  @available(iOS 4, *)
  case afterFirstUnlockThisDeviceOnly
  @available(iOS 4, *)
  case always
  @available(iOS 8, *)
  case whenPasscodeSetThisDeviceOnly
  @available(iOS 4, *)
  case alwaysThisDeviceOnly
  @available(iOS 4, *)
  case whenUnlocked
  @available(iOS 4, *)
  case whenUnlockedThisDeviceOnly
  public static func == (a: FSSupportSDK.KeychainItemAccessibility, b: FSSupportSDK.KeychainItemAccessibility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class KeychainWrapper {
  @available(*, deprecated, message: "KeychainWrapper.defaultKeychainWrapper is deprecated since version 2.2.1, use KeychainWrapper.standard instead")
  public static let defaultKeychainWrapper: FSSupportSDK.KeychainWrapper
  public static let standard: FSSupportSDK.KeychainWrapper
  public var serviceName: Swift.String {
    get
  }
  public var accessGroup: Swift.String? {
    get
  }
  public init(serviceName: Swift.String, accessGroup: Swift.String? = nil)
  open func hasValue(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  open func accessibilityOfKey(_ key: Swift.String) -> FSSupportSDK.KeychainItemAccessibility?
  open func allKeys() -> Swift.Set<Swift.String>
  open func integer(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Int?
  open func float(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Float?
  open func double(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Double?
  open func bool(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool?
  open func string(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.String?
  open func object(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> (any Foundation.NSCoding)?
  open func data(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Foundation.Data?
  open func dataRef(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Foundation.Data?
  @discardableResult
  open func set(_ value: Swift.Int, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Float, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Double, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: any Foundation.NSCoding, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @available(*, deprecated, message: "remove is deprecated since version 2.2.1, use removeObject instead")
  @discardableResult
  open func remove(key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func removeObject(forKey key: Swift.String, withAccessibility accessibility: FSSupportSDK.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool
  @discardableResult
  open func removeAllKeys() -> Swift.Bool
  open class func wipeKeychain()
  @objc deinit
}
public struct SupportSDKView : SwiftUI.UIViewControllerRepresentable {
  public init(entryPoint: FSSupportSDK.EntryPoint, config: (modules: [FSSupportSDK.FSSupport.Modules]?, theme: UIKit.UIColor?, isDarkModeEnable: Swift.Bool?)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> FSSupportSDK.SupportSDKView.Coordinator
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: FSSupportSDK.SupportSDKView.Context) -> FSSupportSDK.SupportSDKViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: FSSupportSDK.SupportSDKViewController, context: FSSupportSDK.SupportSDKView.Context)
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject {
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = FSSupportSDK.SupportSDKViewController
}
public enum EntryPoint {
  case dashboard
  case tickets
  case reportIssue
  case requestService
  case approveRequests
  public func getPath() -> Swift.String
  public func getModuleName() -> Swift.String
  public static func == (a: FSSupportSDK.EntryPoint, b: FSSupportSDK.EntryPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SupportSDKViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FSSupportSDK.SupportSDKViewController : WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension FSSupportSDK.SupportSDKViewController : QuickLook.QLPreviewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> any QuickLook.QLPreviewItem
}
public typealias FWUATHandler = ((Swift.String?, Foundation.NSError?) -> Swift.Void)
public typealias FWLogoutHandler = ((Swift.Bool?, Foundation.NSError?) -> Swift.Void)
@objc @_inheritsConvenienceInitializers public class SSOManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: FSSupportSDK.SSOManager
  public var authSession: (any FSSupportSDK.OIDExternalUserAgentSession)?
  public func setCurrentApp(appName: FSSupportSDK.FWProduct)
  public func ssoLoginWithDefaultBrowser(edgeBrowser: Swift.Bool = false, orgURL: Swift.String, authURL: Foundation.URL? = nil, clientID: Swift.String, redirectionURI: Swift.String, tokenURL: Swift.String = "", additionalParameter: Foundation.NSDictionary? = nil, prompt: Swift.String? = "login", completion: @escaping FSSupportSDK.FWUATHandler) -> (any FSSupportSDK.OIDExternalUserAgentSession)?
  public func ssoLogin(presentingVC: UIKit.UIViewController, orgURL: Swift.String, authURL: Foundation.URL? = nil, clientID: Swift.String, redirectionURI: Swift.String, tokenURL: Swift.String = "", additionalParameter: Foundation.NSDictionary? = nil, prompt: Swift.String? = "login", completion: @escaping FSSupportSDK.FWUATHandler) -> (any FSSupportSDK.OIDExternalUserAgentSession)?
  public func ssoLogoutSessionByRetrivingOldSessions(completion: @escaping FSSupportSDK.FWLogoutHandler)
  public func ssoLogoutSession(completion: @escaping FSSupportSDK.FWLogoutHandler)
  public func setCurrentActive(orgUrl: Swift.String)
  @available(*, deprecated)
  public func getAdditionalTokenInfo() -> Foundation.NSDictionary?
  public func getUATToken(byForceFetch: Swift.Bool = false, forTheUserWithOrgUrl pOrgUrl: Swift.String? = nil, completion: @escaping FSSupportSDK.FWUATHandler)
  @objc override dynamic public init()
  @objc deinit
}
extension FSSupportSDK.SSOManager {
  @objc dynamic public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  public func applicationWillEnterForeground(_ application: UIKit.UIApplication)
  public func applicationWillResignActive(_ application: UIKit.UIApplication)
}
extension FSSupportSDK.FWProduct : Swift.Equatable {}
extension FSSupportSDK.FWProduct : Swift.Hashable {}
extension FSSupportSDK.FWProduct : Swift.RawRepresentable {}
extension FSSupportSDK.FSSupport.Modules : Swift.Equatable {}
extension FSSupportSDK.FSSupport.Modules : Swift.Hashable {}
extension FSSupportSDK.KeychainItemAccessibility : Swift.Equatable {}
extension FSSupportSDK.KeychainItemAccessibility : Swift.Hashable {}
extension FSSupportSDK.EntryPoint : Swift.Equatable {}
extension FSSupportSDK.EntryPoint : Swift.Hashable {}
